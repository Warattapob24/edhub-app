"""Add Program model and link to Classroom, Curriculum

Revision ID: 9d683942016e
Revises: b4c307cf6f51
Create Date: 2025-10-29 09:54:12.845289

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9d683942016e'
down_revision = 'b4c307cf6f51'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create 'program' table
    op.create_table('program',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('program', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_program_name'), ['name'], unique=True)

    # (Optional but recommended) Create a default program entry
    # Bind the current connection to the session for data manipulation
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    
    # Define a simple representation of the Program table for insertion
    program_table = sa.Table(
        'program',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String(100)),
        sa.Column('description', sa.String(255))
    )

    default_program_name = 'ทั่วไป'
    default_program_desc = 'สายการเรียนทั่วไป (ค่าเริ่มต้น)'
    
    # Check if default program already exists (idempotency)
    result = session.execute(
        sa.select(program_table).where(program_table.c.name == default_program_name)
    ).first()

    if result is None:
        # Insert default program if it doesn't exist
        op.bulk_insert(program_table,
            [{'name': default_program_name, 'description': default_program_desc}]
        )
        # Fetch the ID of the newly inserted program
        result = session.execute(
            sa.select(program_table.c.id).where(program_table.c.name == default_program_name)
        ).scalar_one()
        default_program_id = result
        print(f"Created default program '{default_program_name}' with ID: {default_program_id}")
    else:
        # If it exists, get its ID
        default_program_id = result.id
        print(f"Default program '{default_program_name}' already exists with ID: {default_program_id}")
        
    session.commit() # Commit the default program insert/check
    session.close() # Close the session


    # 2. Add 'program_id' to 'classroom' (nullable=True)
    with op.batch_alter_table('classroom', schema=None) as batch_op:
        batch_op.add_column(sa.Column('program_id', sa.Integer(), nullable=True))
        batch_op.create_index(batch_op.f('ix_classroom_program_id'), ['program_id'], unique=False)
        batch_op.create_foreign_key('fk_classroom_program_id', 'program', ['program_id'], ['id'])

    # 3. Add 'program_id' to 'curriculum' (initially nullable=True)
    with op.batch_alter_table('curriculum', schema=None) as batch_op:
        batch_op.add_column(sa.Column('program_id', sa.Integer(), nullable=True)) # <-- Initially True
        # Drop old unique constraint if it exists (name might vary)
        try:
            # Try dropping constraint with potential default name or the one specified before
             batch_op.drop_constraint('_semester_grade_subject_uc', type_='unique') 
        except Exception:
             # If specific name fails, try finding ANY unique constraint on these columns
             # This part is complex and might need manual inspection of your DB if it fails
             print("Could not drop old unique constraint automatically. Manual check might be needed.")
             pass # Continue even if dropping fails, adding the new one might work or fail clearly

        batch_op.create_index(batch_op.f('ix_curriculum_program_id'), ['program_id'], unique=False)
        batch_op.create_foreign_key('fk_curriculum_program_id', 'program', ['program_id'], ['id'])

    # 4. Update existing curriculum rows to use the default program_id
    # Define a simple representation of the Curriculum table for update
    curriculum_table = sa.Table(
        'curriculum',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('program_id', sa.Integer)
        # Include other columns if needed for WHERE clause, but not necessary here
    )
    op.execute(
        curriculum_table.update().where(curriculum_table.c.program_id.is_(None)).values(program_id=default_program_id)
    )
    print(f"Updated existing curriculum entries to program_id {default_program_id}")


    # 5. Alter 'program_id' in 'curriculum' to be NOT NULL
    with op.batch_alter_table('curriculum', schema=None) as batch_op:
        batch_op.alter_column('program_id',
               existing_type=sa.INTEGER(),
               nullable=False) # <-- Set to False NOW

        # 6. Create the NEW unique constraint including program_id
        batch_op.create_unique_constraint('_semester_grade_program_subject_uc', ['semester_id', 'grade_level_id', 'program_id', 'subject_id'])

    print("Migration completed successfully.")
    # ### end Alembic commands ###


# --- [ ตรวจสอบว่าฟังก์ชัน downgrade() ถูกสร้างถูกต้องหรือไม่ (ควรมีโค้ดที่ย้อนกลับการเปลี่ยนแปลง) ] ---
def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('curriculum', schema=None) as batch_op:
        batch_op.drop_constraint('_semester_grade_program_subject_uc', type_='unique')
        batch_op.drop_constraint('fk_curriculum_program_id', type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_curriculum_program_id'))
        batch_op.drop_column('program_id')
        # Recreate old constraint if needed (complex, often omitted or requires manual creation)
        # batch_op.create_unique_constraint('_semester_grade_subject_uc', ['semester_id', 'grade_level_id', 'subject_id'])


    with op.batch_alter_table('classroom', schema=None) as batch_op:
        batch_op.drop_constraint('fk_classroom_program_id', type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_classroom_program_id'))
        batch_op.drop_column('program_id')

    with op.batch_alter_table('program', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_program_name'))

    op.drop_table('program')
    # ### end Alembic commands ###